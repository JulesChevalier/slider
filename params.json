{"name":"Slider","tagline":"An Efficient Incremental Reasoner","body":"#SLIDER\r\n\r\n##What is Slider?\r\n\r\nSlider is an incremental forward-chaining reasoner supporting the following rule sets:\r\n\r\n - &rho;df Default\r\n - &rho;df Full\r\n - RDFS Light\r\n - RDFS Default\r\n - RDFS Full\r\n\r\nSlider allows to custom these fragments by selecting the rules to use for the inference.\r\nAdditional rules can be easily added by implementing a single method.\r\n\r\nSlider provides both batch and incremental reasoning, and supports data streams.\r\n\r\nIt is a full Java project.\r\n\r\n##Requirements\r\n\r\n - **Java 1.7** or greater\r\n - **Git** to clone the project\r\n - **Maven** to install and run it easily\r\n\r\n##Installation\r\n\r\nTo install Slider, clone the repository and compile it through Maven:\r\n\r\n```bash\r\ngit clone git@github.com:juleschevalier/slider.git\r\ncd slider/\r\nmvn install\r\n```\r\n\r\n## Running Slider\r\n\r\n###Command Line use\r\n\r\nSlider can be run as a standalone software.\r\nThe exec-maven-plugin is configured, and can be used to run it.\r\nFor example, for launch the inference on the file \"toto.nt\" for RDFS:\r\n```bash\r\nmvn exec:java -q -Dexec.args=\"-p RDFS toto.nt\"\r\n```\r\n\r\nHere is the list of the different options (accesible via -h,--help option):\r\n```\r\nusage: main\r\n -b,--buffer-size <time>......set the buffer size\r\n -d,--directory <directory>...infers on all ontologies in the directory\r\n -h,--help....................print this message\r\n -i,--iteration <number>......how many times each file\r\n -n,--threads <number>........set the number of threads by available core (0 means the jvm manage)\r\n -o,--output..................save output into file\r\n -p,--profile <profile>.......set the fragment [RHODF, BRHODF, RDFS, BRDFS, LRDFS]\r\n -t,--timeout <arg>...........set the buffer timeout in ms\r\n -v,--verbose.................enable verbose mode\r\n -w,--warm-up.................insert a warm-up lap before the inference\r\n```\r\n\r\n####Examples\r\nReason on all ontologies in the folder \"~/Ontologies\" with RDFS\r\n```bash\r\nmvn exec:java -q -Dexec.args=\"-p RDFS -d ~/Ontologies\"\r\n```\r\nReason over the ontology \"ontology1.nt\" with &rho;df with a buffer timeout of 1000ms\r\n```bash\r\nmvn exec:java -q -Dexec.args=\"-p rhodf -t 1000 ~/Ontologies/ontology1.nt\"\r\n```\r\nReason on all ontologies in the folder \"~/Ontologies\" with RDFS with a warm-up lap (no included in results) and 10 iterations for each file\r\n```bash\r\nmvn exec:java -q -Dexec.args=\"-p RDFS -w -i 10 -d ~/Ontologies\"\r\n```\r\nReason over the ontology \"ontology1.nt\" with &rho;df and write the output into \"infered1.nt\"\r\n```bash\r\nmvn exec:java -q -Dexec.args=\"-p rhodf -o infered.nt ~/Ontologies/ontology1.nt\"\r\n```\r\n\r\n###Use Slider's API\r\n\r\nSlider can also be used as a library.\r\nIt provides both bash and incremental reasoning.\r\n\r\n####Batch reasoning\r\n```Java\r\n        final TripleStore tripleStore = new VerticalPartioningTripleStoreRWLock();\r\n        final Dictionary dictionary = new DictionaryPrimitrivesRWLock();\r\n        final BatchReasoner reasoner = new BatchReasoner(tripleStore, dictionary, ReasonerProfile.RDFS);\r\n\r\n        final Parser parser = new ParserImplNaive(dictionary, tripleStore);\r\n        final Collection<Triple> triples = parser.parse(file);\r\n\r\n        reasoner.reasonOn(triples);\r\n```\r\n\r\n####Incremental reasoning\r\n```Java\r\n        final TripleStore tripleStore = new VerticalPartioningTripleStoreRWLock();\r\n        final Dictionary dictionary = new DictionaryPrimitrivesRWLock();\r\n        final IncrementalReasoner reasoner = new IncrementalReasoner(tripleStore, dictionary, ReasonerProfile.RDFS);\r\n\r\n        final Parser parser = new ParserImplNaive(dictionary, tripleStore);\r\n        reasoner.start();\r\n\r\n        parser.parseStream(file.getAbsolutePath(), reasoner);\r\n\r\n        reasoner.closeAndWait();\r\n```\r\n\r\n##Maven dependency\r\n\r\nSetup the server in your pom.xml:\r\n\r\n```xml\r\n<repositories>\r\n    <repository>\r\n        <id>slider-mvn-repo</id>\r\n        <url>https://raw.github.com/juleschevalier/slider/mvn-repo/</url>\r\n        <snapshots>\r\n            <enabled>true</enabled>\r\n            <updatePolicy>always</updatePolicy>\r\n        </snapshots>\r\n    </repository>\r\n</repositories>\r\n```\r\n\r\nThen use the following dependency :\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>fr.ujm.tse.lt2c.satin</groupId>\r\n    <artifactId>slider</artifactId>\r\n    <version>0.9.7-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n<!-- Have a look [here](https://github.com/juleschevalier/slider/tree/mvn-repo/fr/ujm/tse/lt2c/satin/slider) to see all the available versions -->\r\n\r\n##Correctness\r\n\r\nThe correctness of Slider's inference has been verified using [Jena](https://jena.apache.org/documentation/inference/index.html)'s reasoner as ground truth.\r\n\r\n##How to reproduce\r\n\r\nAll the details to reproduce our experimentations on Slider.\r\n\r\n###Ontologies\r\n\r\nThe [BSBM](http://wifo5-03.informatik.uni-mannheim.de/bizer/berlinsparqlbenchmark/) ontologies have been generated thanks to this [script](https://gist.github.com/cgravier/8658389).\r\nIt generates the following ontologies:\r\n * dataset_100k.nt\r\n * dataset_200k.nt\r\n * dataset_500k.nt\r\n * dataset_1M.nt\r\n * dataset_5M.nt\r\n\r\nThe subClassOf ontologies have been generated thanks to this [script](https://gist.github.com/JulesChevalier/4bd3410cf14bd51e9811).\r\nWe used it to generate the following ontologies:\r\n * subClassOf10.nt\r\n * subClassOf20.nt\r\n * subClassOf50.nt\r\n * subClassOf100.nt\r\n * subClassOf200.nt\r\n * subClassOf500.nt\r\n\r\nYou can download the two real life zipped ontologies here:\r\n * [wikipediaOntology.zip](http://datasets-satin.telecom-st-etienne.fr/cgravier/inferray/wikipediaOntology.zip)\r\n * [wordnetOntology.zip](http://datasets-satin.telecom-st-etienne.fr/cgravier/inferray/wordnetOntology.zip)\r\n\r\nAll these ontologies can be downloaded [here](http://datasets-satin.telecom-st-etienne.fr/jchevalier/slider)\r\n\r\n<!-- The other ontologies used for anterior experimentations can be found [here](http://datasets-satin.telecom-st-etienne.fr/jchevalier/slider/tuning/) -->\r\n\r\n###Run the experimentations\r\n\r\nTo benchmark Slider's performances, the easiest way is to use the commande line interface provided by the Main class.\r\nYou can use the maven exec plugin preconfigured.\r\nFirst install Slider (see section Installation).\r\nFor better results, we launch the inference 10 times on each ontology, and used the average time.\r\nWe also add a *warm-up* lap, which is a first iteration of inference which does not appear in the results.\r\nThis first step allow Java to operate the on-the-fly optimisation of the binaries.\r\n\r\nTo run an experimentation on the ontologies contained in a folder \"Ontologies\" for RDFS, please use the following command\r\n```bash\r\nmvn exec:java -q -Dexec.args=\"-p RDFS -i 10 -w -d ~/Ontologies\"\r\n```\r\n\r\nTo run experimentation on the parameters of Slider, please use the same command with the corresponding options:\r\n```bash\r\n -b,--buffer-size <time>......set the buffer size\r\n -n,--threads <number>........set the number of threads by available core (0 means the jvm manage)\r\n -t,--timeout <arg>.......... set the buffer timeout in ms (0 means timeout will be disabled)\r\n```\r\n\r\n##Bug reports\r\n\r\nIf you discover any bug, feel free to create an issue on GitHub: https://github.com/juleschevalier/slider/issues.\r\n\r\n##Contributors\r\n\r\n - Jules Chevalier [@juleschevalier](https://github.com/juleschevalier)\r\n - Julien Subercaze [@jsubercaze](https://github.com/jsubercaze)\r\n - Christophe Gravier [@flaforest](https://github.com/flaforest)\r\n - Frédérique Laforest [@cgravier](https://github.com/cgravier)\r\n\r\n##Licence\r\n\r\nSlider is provided under Apache License, Version 2.0.\r\nYou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\r\n\r\n##Contact\r\n\r\nFor any question, please contact us at jules.chevalier@univ-st-etienne.fr\r\n\r\n##Acknowledgement\r\n\r\nThis work is part of the [Open Cloudware](http://www.opencloudware.org/bin/view/Main/) project, funded by the French Fonds national pour la Société Numérique(FSN), and supported by Pôles Minalogic, Systematic and SCS.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}